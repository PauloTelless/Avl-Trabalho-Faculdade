<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Simulador de Árvores-AVL</title>
    <style>
        .btn {
            padding: 5px 10px;
            margin: 5px;
            cursor: pointer;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        .btn[disabled] {
            background-color: #f0f0f0;
            cursor: not-allowed;
        }

        .ui-slider {
            position: relative;
            height: 10px;
            background: #ddd;
            border-radius: 5px;
        }

        .ui-slider-handle {
            position: absolute;
            top: -5px;
            width: 10px;
            height: 20px;
            background: #007bff;
            border-radius: 3px;
            cursor: pointer;
            transition: left 0.3s;
        }

        canvas {
            border: 1px solid black;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body onload="init();" class="VisualizationMainPage">
    <div id="container">
        <div id="header">
            <h1>INE 5408/INE 5609 - Simulação de Árvores AVL</h1>
        </div>

        <div id="mainContent">
            <div id="algoControlSection">
                <table id="AlgorithmSpecificControls">
                    <tr>
                        <td><input type="text" id="inputValue" class="btn" title="Escreva aqui o valor que deseja inserir, excluir ou achar."></td>
                        <td><input type="button" value="INSERIR" id="insertButton" class="btn" title="Insere o valor fornecido, rebalanceando."></td>
                        <td><input type="button" value="EXCLUIR" id="deleteButton" class="btn" title="Exclui o valor fornecido, rebalanceando."></td>
                        <td><input type="button" value="ACHAR" id="findButton" class="btn" title="Acha o valor fornecido."></td>
                        <td><input type="button" value="PERCORRER INORDEM" id="traverseButton" class="btn" title="Percorre toda a árvore usando o algoritmo INORDEM, imprimindo os valores dos nodos ao lado."></td>
                    </tr>
                </table>
            </div>

            <canvas id="canvas" width="1200" height="500"></canvas>

            <div id="generalAnimationControlSection">
                <table id="GeneralAnimationControls">
                    <tr>
                        <td><input type="button" value="|<<" disabled="" class="btn"></td>
                        <td><input type="button" value="|<" disabled="" class="btn"></td>
                        <td><input type="button" value="||" class="btn"></td>
                        <td><input type="button" value=">|" disabled="" class="btn"></td>
                        <td><input type="button" value=">>|" disabled="" class="btn"></td>
                        <td>
                            <div class="ui-slider" style="width: 200px;">
                                <div class="ui-slider-handle" style="left: 75%;"></div>
                            </div>
                        </td>
                        <td>w:</td>
                        <td><input type="text" id="canvasWidth" value="1200" size="4" class="btn"></td>
                        <td>h:</td>
                        <td><input type="text" id="canvasHeight" value="500" size="4" class="btn"></td>
                        <td><input type="button" value="MODIFICAR CANVAS" id="modifyCanvasButton" class="btn"></td>
                        <td><input type="button" value="MOVER CONTROLES" class="btn"></td>
                    </tr>
                </table>
            </div>
        </div> <!-- mainContent -->

        <div id="footer">
            <p><a href="RB.html">Simulador de Árvores RB de INE 5408/INE 5609</a> --- <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Página com Simuladores Originais de David Galles na USFCA</a></p>
            <font size="1"> &copy; 2016 Aldo von Wangenheim INCoD/INE/CTC/UFSC
            <br>Disciplinas INE 5408/INE 5609 - Estruturas de Dados
            <br>Based upon work of David Galles@USFCA</font>
        </div>
    </div><!-- container -->

    <script>
        // AVL Tree Node
        class Node {
            constructor(value) {
                this.value = value;
                this.left = null;
                this.right = null;
                this.height = 1;
            }
        }

        // AVL Tree Class
        class AVLTree {
            constructor() {
                this.root = null;
            }

            // A utility function to get the height of the tree
            height(N) {
                if (N === null)
                    return 0;
                return N.height;
            }

            // A utility function to right rotate subtree rooted with y
            rightRotate(y) {
                let x = y.left;
                let T2 = x.right;

                // Perform rotation
                x.right = y;
                y.left = T2;

                // Update heights
                y.height = Math.max(this.height(y.left), this.height(y.right)) + 1;
                x.height = Math.max(this.height(x.left), this.height(x.right)) + 1;

                // Return new root
                return x;
            }

            // A utility function to left rotate subtree rooted with x
            leftRotate(x) {
                let y = x.right;
                let T2 = y.left;

                // Perform rotation
                y.left = x;
                x.right = T2;

                // Update heights
                x.height = Math.max(this.height(x.left), this.height(x.right)) + 1;
                y.height = Math.max(this.height(y.left), this.height(y.right)) + 1;

                // Return new root
                return y;
            }

            // Get Balance factor of node N
            getBalance(N) {
                if (N === null)
                    return 0;
                return this.height(N.left) - this.height(N.right);
            }

            // Recursive function to insert a value in the subtree rooted
            // with node and returns the new root of the subtree.
            insert(node, value) {
                // 1. Perform the normal BST insertion
                if (node === null)
                    return (new Node(value));

                if (value < node.value)
                    node.left = this.insert(node.left, value);
                else if (value > node.value)
                    node.right = this.insert(node.right, value);
                else // Duplicate values are not allowed in BST
                    return node;

                // 2. Update height of this ancestor node
                node.height = 1 + Math.max(this.height(node.left),
                        this.height(node.right));

                // 3. Get the balance factor of this ancestor
                // node to check whether this node became
                // unbalanced
                let balance = this.getBalance(node);

                // If this node becomes unbalanced, then there
                // are 4 cases

                // Left Left Case
                if (balance > 1 && value < node.left.value)
                    return this.rightRotate(node);

                // Right Right Case
                if (balance < -1 && value > node.right.value)
                    return this.leftRotate(node);

                // Left Right Case
                if (balance > 1 && value > node.left.value) {
                    node.left = this.leftRotate(node.left);
                    return this.rightRotate(node);
                }

                // Right Left Case
                if (balance < -1 && value < node.right.value) {
                    node.right = this.rightRotate(node.right);
                    return this.leftRotate(node);
                }

                /* return the (unchanged) node pointer */
                return node;
            }

            // Recursive function to delete a node with given value
            // from subtree with given root. It returns root of the
            // modified subtree.
            deleteNode(root, value) {
                // STEP 1: PERFORM STANDARD BST DELETE

                if (root === null)
                    return root;

                // If the value to be deleted is smaller than
                // the root's value, then it lies in left subtree
                if (value < root.value)
                    root.left = this.deleteNode(root.left, value);

                // If the value to be deleted is greater than the
                // root's value, then it lies in right subtree
                else if (value > root.value)
                    root.right = this.deleteNode(root.right, value);

                // if value is same as root's value, then this is the node
                // to be deleted
                else {
                    // node with only one child or no child
                    if ((root.left === null) || (root.right === null)) {
                        let temp = root.left ? root.left : root.right;

                        // No child case
                        if (temp === null) {
                            temp = root;
                            root = null;
                        } else // One child case
                            root = temp; // Copy the contents of
                                         // the non-empty child
                    } else {
                        // node with two children: Get the inorder
                        // successor (smallest in the right subtree)
                        let temp = this.minValueNode(root.right);

                        // Copy the inorder successor's data to this node
                        root.value = temp.value;

                        // Delete the inorder successor
                        root.right = this.deleteNode(root.right, temp.value);
                    }
                }

                // If the tree had only one node then return
                if (root === null)
                    return root;

                // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
                root.height = Math.max(this.height(root.left), this.height(root.right)) + 1;

                // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to check whether
                // this node became unbalanced)
                let balance = this.getBalance(root);

                // If this node becomes unbalanced, then there are 4 cases
                // Left Left Case
                if (balance > 1 && this.getBalance(root.left) >= 0)
                    return this.rightRotate(root);

                // Left Right Case
                if (balance > 1 && this.getBalance(root.left) < 0) {
                    root.left = this.leftRotate(root.left);
                    return this.rightRotate(root);
                }

                // Right Right Case
                if (balance < -1 && this.getBalance(root.right) <= 0)
                    return this.leftRotate(root);

                // Right Left Case
                if (balance < -1 && this.getBalance(root.right) > 0) {
                    root.right = this.rightRotate(root.right);
                    return this.leftRotate(root);
                }

                return root;
            }

            // A utility function to get the node with the minimum value
            minValueNode(node) {
                let current = node;

                /* loop down to find the leftmost leaf */
                while (current.left !== null)
                    current = current.left;

                return current;
            }

            // A utility function to find a value in the AVL tree
            find(node, value) {
                if (node === null)
                    return null;

                if (value < node.value)
                    return this.find(node.left, value);
                else if (value > node.value)
                    return this.find(node.right, value);
                else
                    return node;
            }

            // A utility function to do inorder traversal of the tree
            inOrderTraversal(node, result = []) {
                if (node !== null) {
                    this.inOrderTraversal(node.left, result);
                    result.push(node.value);
                    this.inOrderTraversal(node.right, result);
                }
                return result;
            }

            // Public method to insert value
            insertValue(value) {
                this.root = this.insert(this.root, value);
                this.drawTree();
            }

            // Public method to delete value
            deleteValue(value) {
                this.root = this.deleteNode(this.root, value);
                this.drawTree();
            }

            // Public method to find value
            findValue(value) {
                return this.find(this.root, value);
            }

            // Public method to traverse tree in order
            traverseInOrder() {
                return this.inOrderTraversal(this.root);
            }

            // Method to draw the tree on the canvas
            drawTree() {
                let canvas = document.getElementById('canvas');
                let ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                this.drawNode(ctx, this.root, canvas.width / 2, 50, canvas.width / 4);
            }

            // Method to draw a node and its children
            drawNode(ctx, node, x, y, dx) {
                if (node !== null) {
                    ctx.beginPath();
                    ctx.arc(x, y, 15, 0, 2 * Math.PI);
                    ctx.stroke();
                    ctx.fillText(node.value, x - 5, y + 5);

                    if (node.left !== null) {
                        ctx.moveTo(x, y);
                        ctx.lineTo(x - dx, y + 50);
                        ctx.stroke();
                    }

                    if (node.right !== null) {
                        ctx.moveTo(x, y);
                        ctx.lineTo(x + dx, y + 50);
                        ctx.stroke();
                    }

                    this.drawNode(ctx, node.left, x - dx, y + 50, dx / 2);
                    this.drawNode(ctx, node.right, x + dx, y + 50, dx / 2);
                }
            }
        }

        let avlTree = new AVLTree();

        function init() {
            $('#insertButton').click(insertNode);
            $('#deleteButton').click(deleteNode);
            $('#findButton').click(findNode);
            $('#traverseButton').click(traverseTree);
        }

        function insertNode() {
            let value = parseInt($('#inputValue').val());
            if (!isNaN(value)) {
                avlTree.insertValue(value);
            } else {
                alert("Por favor, insira um valor numérico válido.");
            }
        }

        function deleteNode() {
            let value = parseInt($('#inputValue').val());
            if (!isNaN(value)) {
                avlTree.deleteValue(value);
            } else {
                alert("Por favor, insira um valor numérico válido.");
            }
        }

        function findNode() {
            let value = parseInt($('#inputValue').val());
            if (!isNaN(value)) {
                let node = avlTree.findValue(value);
                if (node) {
                    alert("Valor encontrado: " + node.value);
                } else {
                    alert("Valor não encontrado.");
                }
            } else {
                alert("Por favor, insira um valor numérico válido.");
            }
        }

        function traverseTree() {
            let result = avlTree.traverseInOrder();
            alert("Percurso InOrder: " + result.join(", "));
        }
    </script>
</body>
</html>
